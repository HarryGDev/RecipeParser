#!/usr/bin/env php
<?php

include dirname(dirname(__FILE__)) . '/bootstrap.php';

$recipe_filename = null;
$recipe_url = null;

// Read input
if ($argc < 2) {
    echo "Missing required HTML filename.\n\n";
    echo "Usage: {$_SERVER['SCRIPT_NAME']} <html_file_or_url>\n";
    exit(1);
}

// Output type
if (isset($argv[2]) && strtolower($argv[2]) == "json") {
    $output = "json";
} else {
    $output = "default";
}

if (preg_match("/^https?:\/\//i", $argv[1])) {
    $recipe_url = $argv[1];
} else if (file_exists($argv[1])) {
    $recipe_filename = $argv[1];
} else {
    echo "File does not exist: $argv[1]\n";
    show_usage();
}

// Download recipe file
if ($recipe_url) {
    if ($output == "default") {
        echo "Downloading file from $recipe_url\n";
    }

    // Target filename
    $hostname = parse_url($recipe_url, PHP_URL_HOST);
    $hostname = str_replace(".", "_", $hostname);
    $basename = "onetsp_{$hostname}_" . substr(md5($recipe_url), 0, 8);
    $recipe_filename = tempnam(sys_get_temp_dir(), $basename);

    // Only fetch 1x per day
    if (file_exists($recipe_filename)
        && filesize($recipe_filename) > 0
        && (time() - filemtime($recipe_filename) < 86400)
    ) {
        if ($output == "default") {
            echo "Recipe file already exists: $recipe_filename\n";
        }

    } else {
        // Fetch and cleanup the HTML
        $html = FileUtil::downloadPage($recipe_url);
        $html = RecipeParser_Text::forceUTF8($html);
        $html = RecipeParser_Text::cleanupClippedRecipeHtml($html);

        // Append some notes to the HTML
        $comments = RecipeParser_Text::getRecipeMetadataComment($recipe_url, "curl");
        $html = $comments . "\n\n" . $html;

        if ($output == "default") {
            echo "Saving file to $recipe_filename\n";
        }
        file_put_contents($recipe_filename, $html);
    }
}

if ($output == "default") {
    echo "Parsing recipe from file $recipe_filename\n";
}
$html = file_get_contents($recipe_filename);

// Parse recipe into a struct
try {
    $url = RecipeParser_Text::getRecipeUrlFromMetadata($html);
    $recipe = RecipeParser::parse($html, $url);
} catch (NoMatchingParserException $e) {
    echo "Error: No matching parser (" . $e->getMessage() . ")\n";
    exit(1);
}

// Print recipe.
if ($output == "json") {
    echo $recipe->getJson();
} else {
    print_r($recipe->getArray());
    printStats($recipe);
}

exit;




function printStats($recipe) {
    echo "\n\n";

    $pre = "Recipe: ";
    $warnings = 0;

    if (!$recipe->title) {
        echo "$pre Missing title\n";
        $warnings++;
    }
    if (!$recipe->url) {
        echo "Missing URL\n";
        $warnings++;
    }
    if (!$recipe->source) {
        echo "$pre Missing source\n";
        $warnings++;
    }
    if (!$recipe->time["prep"]
        && !$recipe->time["cook"]
        && !$recipe->time["total"]) {
        echo "$pre No times found \n";
        $warnings++;
    }
    if (!$recipe->yield) {
        echo "$pre Missing yield\n";
        $warnings++;
    }
    if (!count($recipe->ingredients)
        || !count($recipe->ingredients[0]['list'])) {
        echo "$pre Missing ingredients\n";
        $warnings++;
    }
    if (!count($recipe->instructions)
        || !count($recipe->instructions[0]['list'])) {
        echo "$pre Missing instructions\n";
        $warnings++;
    }

    if ($warnings) {
        echo "$pre $warnings warnings.\n";
    } else {
        echo "$pre Looks good!\n";
    }

}

function show_usage() {
    echo "\n";
    echo "Missing required HTML filename.\n\n";
    echo "Usage: {$_SERVER['SCRIPT_NAME']} <html_file_or_url>\n";
    exit(1);
}
